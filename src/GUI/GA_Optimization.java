/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GAFiles.*;
import Package.PackageSpecifications;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import jxl.*;
import jxl.read.biff.BiffException;
import org.jgap.*;
import org.jgap.audit.*;
import org.jgap.data.*;
import org.jgap.gp.function.Cosine;
import org.jgap.impl.*;
import org.jgap.xml.*;

/**
 *
 * @author Pk
 */
public class GA_Optimization extends javax.swing.JFrame {

    /**
     * Creates new form GA_Optimization
     */
    private String[] columns = {"Package ID", "Weight", "Length", "Safety"};
    public Configuration conf = new DefaultConfiguration();
    private DefaultTableModel dt = new DefaultTableModel(columns, 0);
    private SwapMutate mutationOperator;
    private OrderCrossOver orderCrossOver;
    private int populationSize = 5;
    private Genotype genoType;
    Constraint constraint = new Constraint();

    public GA_Optimization() {

        initComponents();
        populateData();

    }

    public void populateData() {
        FileInputStream fs = null;
        try {
            fs = new FileInputStream(new File("data.xls"));
            contentReading(fs);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fs.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void contentReading(InputStream fileInputStream) {
        WorkbookSettings ws = null;
        Workbook workbook = null;
        Sheet s = null;
        Cell rowData[] = null;
        int rowCount = '0';
        int columnCount = '0';
        DateCell dc = null;
        int totalSheet = 0;
        int totalWeight = 0;
        int totalLength = 0;


        try {
            ws = new WorkbookSettings();
            ws.setLocale(new Locale("en", "EN"));
            workbook = Workbook.getWorkbook(fileInputStream, ws);

            totalSheet = workbook.getNumberOfSheets();

            //Getting Default Sheet i.e. 0
            s = workbook.getSheet(0);

            //Reading Individual Cell
            getHeadingFromXlsFile(s);

            //Total Total No Of Rows in Sheet, will return you no of rows that are occupied with some data
            rowCount = s.getRows();

            //Total Total No Of Columns in Sheet
            columnCount = s.getColumns();

            //Reading Individual Row Content
            for (int i = 1; i < rowCount; i++) {
                //Get Individual Row
                rowData = s.getRow(i);
                String[] row = new String[4];
                row[0] = rowData[0].getContents();
                row[1] = rowData[1].getContents();
                row[2] = rowData[2].getContents();
                row[3] = rowData[3].getContents();

                Configurations.PACKAGES[i - 1] = new PackageSpecifications();

                Configurations.PACKAGES[i - 1].setId(i);
                Configurations.PACKAGES[i - 1].setWt(Integer.parseInt(rowData[1].getContents()));
                Configurations.PACKAGES[i - 1].setLength(Integer.parseInt(rowData[2].getContents()));
                Configurations.PACKAGES[i - 1].setSafetyFactor(Integer.parseInt(rowData[3].getContents()));
                totalLength += Integer.parseInt(rowData[2].getContents());
                totalWeight += Integer.parseInt(rowData[1].getContents());
                dt.addRow(row);
            }
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (BiffException e) {
            e.printStackTrace();
        }
        Configurations.AVERAGE_WEIGHT = totalWeight / 64;
        Configurations.AVERAGE_LENGTH = totalLength / 64;
        Configurations.BOX_LENGTH = (int) (Configurations.AVERAGE_LENGTH * 4 + 10);
    }
    /*
     * Returns the Headings used inside the excel sheet
     *
     */

    public void getHeadingFromXlsFile(Sheet sheet) {
        int columnCount = sheet.getColumns();
        for (int i = 0; i < columnCount; i++) {
            System.out.println(sheet.getCell(i, 0).getContents());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTable1.setModel(dt);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Optimize");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Population Size ");

        jSlider1.setMaximum(10);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setValue(0);

        jLabel2.setText("Crossover Rate ");

        jLabel3.setText("Mutation Rate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {


            conf.setPreservFittestIndividual(true);
            conf.setKeepPopulationSizeConstant(true);
            conf.removeNaturalSelectors(true);
            WeightedRouletteSelector selector = new WeightedRouletteSelector(conf);
            conf.addNaturalSelector(selector, false);
            conf.getGeneticOperators().clear();
            mutationOperator = new SwapMutate(conf);
            orderCrossOver = new OrderCrossOver(conf);
            conf.addGeneticOperator(orderCrossOver);
            conf.addGeneticOperator(mutationOperator);
            conf.setPopulationSize(populationSize);

            //what they have worked on is keeping size of chromosome to 64 shile supplying 1 gene what
            //i am doing is keeping 64 gene with no specific size
            WeightDistributionUniformity fitness = new WeightDistributionUniformity();
            conf.setFitnessFunction(fitness);
            IntegerGene[] sampleGene = new IntegerGene[64];
            for (int i = 0; i < 64; i++) {
                try {
                    sampleGene[i] = new IntegerGene(conf, i + 1, i + 1);
                    sampleGene[i].setAllele(i + 1);
                } catch (InvalidConfigurationException ex) {
                    Logger.getLogger(GA_Optimization.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            IChromosome sampleChromosome = new Chromosome(conf, sampleGene);

            conf.setSampleChromosome(sampleChromosome);
            conf.setPopulationSize(200);

            Genotype population = Genotype.randomInitialGenotype(conf);
            List chromosomes = population.getPopulation().getChromosomes();
            for (int i = 0; i < chromosomes.size(); i++) {
                IChromosome chromosome = (IChromosome) chromosomes.get(i);
                RandomGenerator generator = conf.getRandomGenerator();
                diversifyPopulation(chromosome, generator);
            }
            for (int i = 0; i < 200; i++) {

                if (!uniqueChromosomes(population.getPopulation())) {
                    break;
                }
                List<IChromosome> populationChromosomes = population.getPopulation().getChromosomes();
                Iterator itr = populationChromosomes.iterator();
                System.out.println("Population "+ i);
                while (itr.hasNext()) {
                    IChromosome temp = (IChromosome) itr.next();
                    if (!constraint.verify(null, null, temp, 0)) {
                        System.out.println("Length Exceeded");
                    }
                    Configurations.UniquenessCheckerGenePrinter(temp.getGenes(), null);
                }

                population.evolve();
                populationChromosomes = population.getPopulation().getChromosomes();
                itr = populationChromosomes.iterator();
                while (itr.hasNext()) {
                    IChromosome temp = (IChromosome) itr.next();
                    Configurations.UniquenessCheckerGenePrinter(temp.getGenes(), null);
                }
                System.out.println("\n\n");
                IChromosome fittest = population.getFittestChromosome();
                double fitnessValue = fittest.getFitnessValue();
                int popNUm = population.getPopulation().size();
                int generation = population.getConfiguration().getGenerationNr();

                System.out.println(fitnessValue);
                Gene[] solution = fittest.getGenes();
                String[] columns = {"Level", "Box ID", "Package ID", "Weight", "Length", "Safety"};
                dt = new DefaultTableModel(columns, 0);
                System.out.println("Fittest gene");
                constraint.verify(null, null, fittest, 0);
                for (int k = 0; k < 64; k++) {
                    String[] row = new String[6];
                    int level = ((k / 4) % 4) + 1;
                    int boxID = (k / 4);

                    row[0] = level + "";
                    row[1] = boxID + "";

                    row[2] = Configurations.PACKAGES[(Integer) solution[k].getAllele() - 1].getId() + "";
                    row[3] = Configurations.PACKAGES[(Integer) solution[k].getAllele() - 1].getWt() + "";
                    row[4] = Configurations.PACKAGES[(Integer) solution[k].getAllele() - 1].getLength() + "";
                    row[5] = Configurations.PACKAGES[(Integer) solution[k].getAllele() - 1].getSafetyFactor() + "";

                    dt.addRow(row);
                }
                jTable1.setModel(dt);
                this.validate();
            }

        } catch (InvalidConfigurationException ex) {
            Logger.getLogger(GA_Optimization.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed
    public static boolean uniqueChromosomes(Population a_pop) {
        // Check that all chromosomes are unique
        for (int i = 0; i < a_pop.size() - 1; i++) {
            IChromosome c = a_pop.getChromosome(i);
            for (int j = i + 1; j < a_pop.size(); j++) {
                IChromosome c2 = a_pop.getChromosome(j);
                if (c == c2) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GA_Optimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GA_Optimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GA_Optimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GA_Optimization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GA_Optimization().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void diversifyPopulation(IChromosome chromosome, RandomGenerator generator) {

        IntegerGene[] Gene = new IntegerGene[64];
        do {

            for (int i = 0; i < 64; i++) {
                try {
                    int value = generator.nextInt(64);
                    for (int k = 0; k < i; k++) {

                        if ((value + 1) == Gene[k].intValue()) {
                            value = generator.nextInt(64);
                            k = -1;

                        }
                    }
                    Gene[i] = new IntegerGene(conf, value + 1, value + 1);
                    //Gene[i].setConstraintChecker(constraint);
                    Gene[i].setAllele(value + 1);
                    chromosome.setGenes(Gene);
                } catch (InvalidConfigurationException ex) {
                    Logger.getLogger(GA_Optimization.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } while (!constraint.verify(null, null, chromosome, 0));

    }
}
